// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package stream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetImageRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetImageRequest) Reset()         { *m = GetImageRequest{} }
func (m *GetImageRequest) String() string { return proto.CompactTextString(m) }
func (*GetImageRequest) ProtoMessage()    {}
func (*GetImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{0}
}

func (m *GetImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetImageRequest.Unmarshal(m, b)
}
func (m *GetImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetImageRequest.Marshal(b, m, deterministic)
}
func (m *GetImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetImageRequest.Merge(m, src)
}
func (m *GetImageRequest) XXX_Size() int {
	return xxx_messageInfo_GetImageRequest.Size(m)
}
func (m *GetImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetImageRequest proto.InternalMessageInfo

type GetImageResponse struct {
	Images               []byte   `protobuf:"bytes,1,opt,name=images,proto3" json:"images,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetImageResponse) Reset()         { *m = GetImageResponse{} }
func (m *GetImageResponse) String() string { return proto.CompactTextString(m) }
func (*GetImageResponse) ProtoMessage()    {}
func (*GetImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{1}
}

func (m *GetImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetImageResponse.Unmarshal(m, b)
}
func (m *GetImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetImageResponse.Marshal(b, m, deterministic)
}
func (m *GetImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetImageResponse.Merge(m, src)
}
func (m *GetImageResponse) XXX_Size() int {
	return xxx_messageInfo_GetImageResponse.Size(m)
}
func (m *GetImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetImageResponse proto.InternalMessageInfo

func (m *GetImageResponse) GetImages() []byte {
	if m != nil {
		return m.Images
	}
	return nil
}

func init() {
	proto.RegisterType((*GetImageRequest)(nil), "stream.GetImageRequest")
	proto.RegisterType((*GetImageResponse)(nil), "stream.GetImageResponse")
}

func init() {
	proto.RegisterFile("stream.proto", fileDescriptor_bb17ef3f514bfe54)
}

var fileDescriptor_bb17ef3f514bfe54 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x04, 0xb9, 0xf8,
	0xdd, 0x53, 0x4b, 0x3c, 0x73, 0x13, 0xd3, 0x53, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x94,
	0xb4, 0xb8, 0x04, 0x10, 0x42, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x62, 0x5c, 0x6c, 0x99,
	0x20, 0x81, 0x62, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x28, 0xcf, 0x68, 0x2a, 0x23, 0x17,
	0x6f, 0x30, 0xd8, 0xa4, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x57, 0x2e, 0x3e, 0x98,
	0x6e, 0x88, 0x84, 0x90, 0xb8, 0x1e, 0xd4, 0x66, 0x34, 0x8b, 0xa4, 0x24, 0x30, 0x25, 0x20, 0xd6,
	0x19, 0x30, 0x0a, 0xd9, 0x72, 0x71, 0xc0, 0x44, 0xc9, 0x30, 0x20, 0x89, 0x0d, 0xec, 0x4b, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x65, 0x9f, 0xf7, 0xf5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamServiceClient interface {
	GetImageStream(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (StreamService_GetImageStreamClient, error)
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) GetImageStream(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (StreamService_GetImageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[0], "/stream.StreamService/GetImageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceGetImageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_GetImageStreamClient interface {
	Recv() (*GetImageResponse, error)
	grpc.ClientStream
}

type streamServiceGetImageStreamClient struct {
	grpc.ClientStream
}

func (x *streamServiceGetImageStreamClient) Recv() (*GetImageResponse, error) {
	m := new(GetImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error) {
	out := new(GetImageResponse)
	err := c.cc.Invoke(ctx, "/stream.StreamService/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamServiceServer is the server API for StreamService service.
type StreamServiceServer interface {
	GetImageStream(*GetImageRequest, StreamService_GetImageStreamServer) error
	GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error)
}

// UnimplementedStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (*UnimplementedStreamServiceServer) GetImageStream(req *GetImageRequest, srv StreamService_GetImageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetImageStream not implemented")
}
func (*UnimplementedStreamServiceServer) GetImage(ctx context.Context, req *GetImageRequest) (*GetImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_GetImageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).GetImageStream(m, &streamServiceGetImageStreamServer{stream})
}

type StreamService_GetImageStreamServer interface {
	Send(*GetImageResponse) error
	grpc.ServerStream
}

type streamServiceGetImageStreamServer struct {
	grpc.ServerStream
}

func (x *streamServiceGetImageStreamServer) Send(m *GetImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.StreamService/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetImage",
			Handler:    _StreamService_GetImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetImageStream",
			Handler:       _StreamService_GetImageStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream.proto",
}
